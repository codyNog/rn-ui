name: Publish Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ] # mainブランチへのPRでもチェックは走らせたいよね

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check formatting and lint
        run: npm run format
      - name: Build
        run: npm run build
      # - name: Test
      #   run: npm test # テストコマンドをここに記述

  publish-gpr:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions: # GitHub Packages への書き込み権限が必要
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js for GPR publish
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          registry-url: 'https://npm.pkg.github.com/'
      - name: Install dependencies
        run: npm ci
      - name: Set CalVer
        run: |
          DATE=$(date +'%Y.%m')
          # Fetch all tags from remote to get the latest release count
          git fetch --tags
          # List tags for the current month, count them, and increment for the new release
          # Tags are expected in the format YYYY.MM.X
          LAST_RELEASE_COUNT=$(git tag --list "${DATE}.*" | awk -F. '{print $3}' | sort -nr | head -n1)
          if [ -z "$LAST_RELEASE_COUNT" ]; then
            RELEASE_COUNT=1
          else
            RELEASE_COUNT=$((LAST_RELEASE_COUNT + 1))
          fi
          NEW_VERSION="${DATE}.${RELEASE_COUNT}"
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          npm version $NEW_VERSION --no-git-tag-version
      - name: Build
        run: npm run build # 公開前にもビルドを実行
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}